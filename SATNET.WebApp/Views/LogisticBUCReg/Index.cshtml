@model IEnumerable<SATNET.WebApp.Models.Hardware.HardwareComponentRegistrationModel>

<div>

    <div class="app-page-title">
        <div class="page-title-wrapper">
            <div class="page-title-heading">

                <div>
                    Registered BUCs
                    <div class="page-title-subheading">
                    </div>
                </div>
            </div>
            <div class="page-title-actions">

                <div class="d-inline-block dropdown">

                    <div class="dropdown d-inline-block">
                        <button type="button" data-toggle="dropdown" class="mb-0 ml-2  btn  btn btn-info">Export  <i class="fa fa-angle-down ml-2"></i></button>
                        <div tabindex="-1" role="menu" class="dropdown-menu">
                            <button type="button" tabindex="0" class="dropdown-item">PDF</button>
                            <button type="button" tabindex="0" class="dropdown-item">CSV</button>
                            <button type="button" tabindex="0" class="dropdown-item">Print</button>
                        </div>
                    </div>
                    <a href="@String.Format("/{0}", "LogisticBUCReg/Add")" class=" btn btn-default">
                        Register new BUC(s)
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="filters">
        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    <label>Transceiver Model</label>
                    <select id="selectTransceiver" asp-items="ViewBag.SelectHardwareModems" class="form-control select2 text-input">
                        <option value="0" selected>Select</option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label>Customer</label>
                    <select id="selectCustomer" asp-items="ViewBag.SelectCustomerList" class="form-control select2 text-input">
                        <option value="0">Select</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="BodyContent">
                @await Html.PartialAsync("_LogisticBUCRegList", Model)
            </div>



        </div>

    </div>

</div>

@section scripts{
    <script type="text/javascript">
        //$(document).ready(function () {
        //    var http = new XMLHttpRequest;
        //    var endpoint = "http://10.2.0.50/rest/modem/USatcom/AXS001/lock";
        //    http.open("POST", endpoint);
        //    http.send();
        //    $.ajax({
        //        url: endpoint ,
        //        contentType: "application/json",
        //        dataType: 'json',
        //        success: function (result) {
        //            console.log(result);
        //        }
        //    })
        //});

        $(function () {
            refreshTable();
            //refreshAIRMACSelectPicker();
            refreshCustomerSelectPicker();

            $("#selectTransceiver").change(function () {
                reloadBUCList();
            });
            $("#selectCustomer").change(function () {
                reloadBUCList();
            });
        });

        refreshTable = function () {
            var t = $("#grid_table").DataTable({

                "paging": true,
                "lengthChange": true,
                "searching": true,
                "ordering": true,
                "info": true,
                "autoWidth": true,
                "responsive": true,
                "columnDefs": [
                    { "orderable": false, "targets": 0 },
                ],
                //"columnDefs": [
                //    {
                //        'targets': 0, // column index (start from 0)bb
                //        'orderable': false, // set orderable false for selected columns
                //    }],
            });
            t.on('order.dt search.dt', function () {
                t.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

        }

        reloadBUCList = function () {
            var transceiver = $("#selectTransceiver").val();
            var customer = $("#selectCustomer").val();
            console.log(transceiver + ':' + customer);
            $.ajax(
                {
                    url: '/LogisticBUCReg/GetBUCListByFilter',
                    data: { transceiver: transceiver, customer: customer, flag: 'RegisteredBUC' },
                    type: 'get',
                    dataType: "html",
                    success: function (html) {
                        if (html !== null) {
                            $("#BodyContent").html(html);
                            refreshTable();
                        }
                    },
                    error: function () {
                        alert('Error occurred while processing the request.');
                    }
                });

        }

        //refreshAIRMACSelectPicker = function () {
        //    var mySelect = $('#selectAIRMAC').selectpicker({

        //        // text for no selection
        //        noneSelectedText: 'Select',

        //        // text for no result
        //        noneResultsText: 'No results matched {0}',

        //        // Sets the format for the text displayed when selectedTextFormat is count or count > #. {0} is the selected amount. {1} is total available for selection.
        //        // When set to a function, the first parameter is the number of selected options, and the second is the total number of options. 
        //        // The function must return a string.
        //        countSelectedText: function (numSelected, numTotal) {
        //            return (numSelected == 1) ? "{0} item selected" : "{0} items selected";
        //        },

        //        // The text that is displayed when maxOptions is enabled and the maximum number of options for the given scenario have been selected.
        //        // If a function is used, it must return an array. array[0] is the text used when maxOptions is applied to the entire select element. array[1] is the text used when maxOptions is used on an optgroup. 
        //        // If a string is used, the same text is used for both the element and the optgroup.
        //        maxOptionsText: function (numAll, numGroup) {
        //            return [
        //                (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
        //                (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
        //            ];
        //        },

        //        // Text for Select All button
        //        selectAllText: 'Select All',

        //        // Text for Deselect All button
        //        deselectAllText: 'Deselect All',

        //        // Shows done button
        //        doneButton: false,

        //        // Text for done button
        //        doneButtonText: 'Close',

        //        // custom separator
        //        multipleSeparator: ', ',

        //        // button styles
        //        styleBase: 'btn',
        //        style: 'btn-default',

        //        // dropdown size
        //        size: 'auto',

        //        // dropdown title
        //        title: null,

        //        // 'values' | 'static' | 'count' | 'count > x'
        //        selectedTextFormat: 'values',

        //        // dropdown width
        //        width: false,

        //        // e.g., container: 'body' | '.main-body'
        //        container: false,

        //        // hide disabled options
        //        hideDisabled: false,

        //        // shows sub text
        //        showSubtext: false,

        //        // shows icon
        //        showIcon: true,

        //        // shows content
        //        showContent: true,

        //        // auto dropup
        //        dropupAuto: true,

        //        // shows dropdown header
        //        header: false,

        //        // live search options
        //        liveSearch: true,
        //        liveSearchPlaceholder: null,
        //        liveSearchNormalize: false,
        //        liveSearchStyle: 'contains',

        //        // enables Select All / Deselect All box
        //        actionsBox: false,

        //        // icons
        //        iconBase: 'glyphicon',
        //        tickIcon: 'glyphicon-ok',

        //        // shows checkmark on selected option
        //        showTick: false,

        //        // custom template
        //        template: {
        //            caret: '<span class="caret"></span>'
        //        },

        //        // string | array | function
        //        maxOptions: false,

        //        // enables the device's native menu for select menus
        //        mobile: false,

        //        // treats the tab character like the enter or space characters within the selectpicker dropdown.
        //        selectOnTab: false,

        //        // Align the menu to the right instead of the left.
        //        dropdownAlignRight: false,

        //        // e.g. [top, right, bottom, left]
        //        windowPadding: 0

        //    });

        //    // Sets the selected value
        //    mySelect.selectpicker('val', 'JQuery');
        //    mySelect.selectpicker('val', ['jQuery', 'Script']);

        //    // Selects all items
        //    mySelect.selectpicker('selectAll');

        //    // Clears all
        //    mySelect.selectpicker('deselectAll');

        //    // Re-render
        //    mySelect.selectpicker('render');
        //}
        refreshCustomerSelectPicker = function () {
            var mySelect = $('#selectCustomer').selectpicker({

                // text for no selection
                noneSelectedText: 'Select',

                // text for no result
                noneResultsText: 'No results matched {0}',

                // Sets the format for the text displayed when selectedTextFormat is count or count > #. {0} is the selected amount. {1} is total available for selection.
                // When set to a function, the first parameter is the number of selected options, and the second is the total number of options. 
                // The function must return a string.
                countSelectedText: function (numSelected, numTotal) {
                    return (numSelected == 1) ? "{0} item selected" : "{0} items selected";
                },

                // The text that is displayed when maxOptions is enabled and the maximum number of options for the given scenario have been selected.
                // If a function is used, it must return an array. array[0] is the text used when maxOptions is applied to the entire select element. array[1] is the text used when maxOptions is used on an optgroup. 
                // If a string is used, the same text is used for both the element and the optgroup.
                maxOptionsText: function (numAll, numGroup) {
                    return [
                        (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
                        (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
                    ];
                },

                // Text for Select All button
                selectAllText: 'Select All',

                // Text for Deselect All button
                deselectAllText: 'Deselect All',

                // Shows done button
                doneButton: false,

                // Text for done button
                doneButtonText: 'Close',

                // custom separator
                multipleSeparator: ', ',

                // button styles
                styleBase: 'btn',
                style: 'btn-default',

                // dropdown size
                size: 'auto',

                // dropdown title
                title: null,

                // 'values' | 'static' | 'count' | 'count > x'
                selectedTextFormat: 'values',

                // dropdown width
                width: false,

                // e.g., container: 'body' | '.main-body'
                container: false,

                // hide disabled options
                hideDisabled: false,

                // shows sub text
                showSubtext: false,

                // shows icon
                showIcon: true,

                // shows content
                showContent: true,

                // auto dropup
                dropupAuto: true,

                // shows dropdown header
                header: false,

                // live search options
                liveSearch: true,
                liveSearchPlaceholder: null,
                liveSearchNormalize: false,
                liveSearchStyle: 'contains',

                // enables Select All / Deselect All box
                actionsBox: false,

                // icons
                iconBase: 'glyphicon',
                tickIcon: 'glyphicon-ok',

                // shows checkmark on selected option
                showTick: false,

                // custom template
                template: {
                    caret: '<span class="caret"></span>'
                },

                // string | array | function
                maxOptions: false,

                // enables the device's native menu for select menus
                mobile: false,

                // treats the tab character like the enter or space characters within the selectpicker dropdown.
                selectOnTab: false,

                // Align the menu to the right instead of the left.
                dropdownAlignRight: false,

                // e.g. [top, right, bottom, left]
                windowPadding: 0

            });

            // Sets the selected value
            mySelect.selectpicker('val', 'JQuery');
            mySelect.selectpicker('val', ['jQuery', 'Script']);

            // Selects all items
            mySelect.selectpicker('selectAll');

            // Clears all
            mySelect.selectpicker('deselectAll');

            // Re-render
            mySelect.selectpicker('render');
        }


    </script>
}

@model SATNET.WebApp.Models.SiteModel
@*@{
        var controller = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();
    }*@

<!-- Main content -->

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div>
                Site Detail
                <div class="page-title-subheading">
                </div>
            </div>
        </div>
        <div class="page-title-actions">
            <div class="d-inline-block dropdown">
                <div class="dropdown d-inline-block">
                    <button type="button" data-toggle="dropdown" class="mb-0 ml-2  btn  btn btn-info"> <span class="fa fa-download" aria-hidden="true" data-toggle="tooltip" title="Export"></span> <i class="fa fa-angle-down ml-2"></i></button>
                    <div tabindex="-1" role="menu" class="dropdown-menu">
                        <button id="btnExportSite" type="button" tabindex="0" class="dropdown-item"> <span class="fa fa-file-excel" aria-hidden="true"></span> &nbsp;Excel</button>
                        <button style="display:none;" id="pdf" type="button" tabindex="0" class="dropdown-item"> <span class="fa fa-file-pdf" aria-hidden="true"></span> &nbsp;PDF</button>
                        @*<button type="button" tabindex="0" class="dropdown-item">Print</button>*@
                    </div>
                </div>
                <a href="@String.Format("/{0}", "Site/Index")" class=" btn btn-danger ">
                    Back
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.Name, new { })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.Status, new { })
            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.City, new { })
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.Area, new { })
            @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.SubscriberName, new { })
            @Html.EditorFor(model => model.SubscriberName, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.Promotion, new { })
            @Html.EditorFor(model => model.Promotion, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.ServicePlanType, new { })
            @Html.EditorFor(model => model.ServicePlanType, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.ServicePlan, new { })
            @Html.EditorFor(model => model.ServicePlan, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.ModemModel, new { })
            @Html.EditorFor(model => model.ModemModel, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.AirMac, new { })
            @Html.EditorFor(model => model.AirMac, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.IpName, new { })
            @Html.EditorFor(model => model.IpName, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.ActivationDate, new { })
            @Html.EditorFor(model => model.ActivationDate, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.UpdatedOn, new { })
            @Html.EditorFor(model => model.UpdatedOn, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="position-relative form-group">
            @Html.LabelFor(model => model.NextBillingDate, new { })
            @Html.EditorFor(model => model.NextBillingDate, new { htmlAttributes = new { @class = "form-control text-input", @readonly = "readonly" } })
        </div>
    </div>
</div>
<input type="hidden" id="hdnSiteId" value="@ViewBag.SiteId"/>
<!-- /.Main content -->

@section Scripts{
    <script type="text/javascript">
        $(function () {
            $("#btnExportSite").click(function (e) {
                e.preventDefault();
                window.location.href = '/Site/Excel?siteId=' + $('#hdnSiteId').val();
            });
        });

        GetSiteList = function () {
            var statusId = $("#selectSiteStatus").val();
            var promotionId = $("#selectPromotion").val();

            var customerId = $("#hdnCustomerId").val();
            if (customerId == 0) {
                customerId = $("#selectCustomer").val();
            }

            $.ajax(
                {
                    url: '/Site/GetSiteListAjax',
                    data: { customerId: customerId, statusId: statusId, promotionId: promotionId },
                    type: 'get',
                    dataType: "html",
                    success: function (html) {
                        if (html !== null) {
                            $("#BodyContent").html(html);
                            init_table_pagination('grid_table');
                        }
                    },
                    error: function () {
                        alert('Error occurred while processing the request.');
                    }
                });
        }

    </script>
}

